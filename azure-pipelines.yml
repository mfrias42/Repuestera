# Azure DevOps Release Pipeline para Repuestera
# Despliegue multi-ambiente: QA ‚Üí Producci√≥n
# TP05 - Ingenier√≠a de Software 3

trigger:
- main

variables:
  # Configuraci√≥n de Azure
  azureSubscription: 'Azure-Service-Connection'
  resourceGroupName: 'rg-repuestera'
  location: 'Brazil South'
  
  # Configuraci√≥n de Node.js
  nodeVersion: '20.x'
  
  # Variables QA
  webAppNameBackendQA: 'repuestera-api-mfrias-qa'
  webAppNameFrontendQA: 'repuestera-web-mfrias-qa'
  apiUrlQA: 'https://repuestera-api-mfrias-qa.azurewebsites.net/api'
  
  # Variables Producci√≥n
  webAppNameBackendProd: 'repuestera-api-mfrias'
  webAppNameFrontendProd: 'repuestera-web-mfrias'
  apiUrlProd: 'https://repuestera-api-mfrias.azurewebsites.net/api'

stages:
- stage: Build
  displayName: 'Construcci√≥n'
  jobs:
  - job: BuildBackend
    displayName: 'Construir Backend'
    pool:
      vmImage: 'ubuntu-latest'
    
    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: $(nodeVersion)
      displayName: 'Instalar Node.js $(nodeVersion)'

    - script: |
        cd backend
        npm install --production=false
      displayName: 'Instalar dependencias del backend'
    
    - script: |
        cd backend
        npm run test
      displayName: 'Ejecutar pruebas del backend'
      continueOnError: false

    - task: ArchiveFiles@2
      inputs:
        rootFolderOrFile: 'backend'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/backend.zip'
        replaceExistingArchive: true
      displayName: 'Comprimir archivos del backend'

    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)/backend.zip'
        ArtifactName: 'backend-drop'
        publishLocation: 'Container'
      displayName: 'Publicar artefacto del backend'

  - job: BuildFrontend
    displayName: 'Construir Frontend'
    pool:
      vmImage: 'ubuntu-latest'
    
    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: $(nodeVersion)
      displayName: 'Instalar Node.js $(nodeVersion)'

    - script: |
        cd frontend
        npm install
        # Build gen√©rico - las variables espec√≠ficas se configuran en cada ambiente
        npm run build
      displayName: 'Instalar dependencias y construir'
      env:
        REACT_APP_API_URL: 'PLACEHOLDER_WILL_BE_REPLACED'
        NODE_ENV: 'production'

    - task: ArchiveFiles@2
      inputs:
        rootFolderOrFile: 'frontend/build'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/frontend.zip'
        replaceExistingArchive: true
      displayName: 'Comprimir build del frontend'

    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)/frontend.zip'
        ArtifactName: 'frontend-drop'
        publishLocation: 'Container'
      displayName: 'Publicar artefacto del frontend'

# ============================================================================
# STAGE QA - Despliegue Autom√°tico para Testing
# ============================================================================
- stage: DeployQA
  displayName: 'üß™ QA Environment'
  dependsOn: Build
  condition: succeeded()
  
  variables:
    NODE_ENV: 'qa'
    API_URL: $(apiUrlQA)
  
  jobs:
  - job: DeployBackendQA
    displayName: 'Deploy API to QA'
    pool:
      vmImage: 'ubuntu-latest'
    
    steps:
    - download: current
      artifact: backend-drop
      displayName: 'Download Backend Artifact'
      
    - task: AzureWebApp@1
      inputs:
        azureSubscription: $(azureSubscription)
        appType: 'webAppLinux'
        appName: $(webAppNameBackendQA)
        resourceGroupName: $(resourceGroupName)
        package: '$(Pipeline.Workspace)/backend-drop/backend.zip'
        runtimeStack: 'NODE|20-lts'
        startUpCommand: 'npm start'
      displayName: 'Deploy Backend to QA'
    
    - task: AzureAppServiceSettings@1
      inputs:
        azureSubscription: $(azureSubscription)
        appName: $(webAppNameBackendQA)
        resourceGroupName: $(resourceGroupName)
        appSettings: |
          [
            {
              "name": "NODE_ENV",
              "value": "qa",
              "slotSetting": false
            },
            {
              "name": "PORT",
              "value": "8000",
              "slotSetting": false
            },
            {
              "name": "WEBSITE_NODE_DEFAULT_VERSION",
              "value": "20.11.0",
              "slotSetting": false
            }
          ]
      displayName: 'Configure QA Backend Settings'

  - job: DeployFrontendQA
    displayName: 'Deploy Frontend to QA'
    pool:
      vmImage: 'ubuntu-latest'
    dependsOn: DeployBackendQA
    
    steps:
    - download: current
      artifact: frontend-drop
      displayName: 'Download Frontend Artifact'
      
    - task: AzureWebApp@1
      inputs:
        azureSubscription: $(azureSubscription)
        appType: 'webAppLinux'
        appName: $(webAppNameFrontendQA)
        resourceGroupName: $(resourceGroupName)
        package: '$(Pipeline.Workspace)/frontend-drop/frontend.zip'
        runtimeStack: 'NODE|20-lts'
        startUpCommand: 'npx serve -s . -l 8080'
      displayName: 'Deploy Frontend to QA'
    
    - task: AzureAppServiceSettings@1
      inputs:
        azureSubscription: $(azureSubscription)
        appName: $(webAppNameFrontendQA)
        resourceGroupName: $(resourceGroupName)
        appSettings: |
          [
            {
              "name": "WEBSITE_NODE_DEFAULT_VERSION",
              "value": "20.11.0",
              "slotSetting": false
            },
            {
              "name": "PORT",
              "value": "8080",
              "slotSetting": false
            },
            {
              "name": "REACT_APP_API_URL",
              "value": "$(apiUrlQA)",
              "slotSetting": false
            }
          ]
      displayName: 'Configure QA Frontend Settings'

# ============================================================================
# STAGE PRODUCTION - Despliegue con Aprobaci√≥n Manual
# ============================================================================
- stage: DeployProduction
  displayName: 'üöÄ Production Environment'
  dependsOn: DeployQA
  condition: succeeded()
  
  variables:
    NODE_ENV: 'production'
    API_URL: $(apiUrlProd)
  
  jobs:
  - job: DeployBackendProd
    displayName: 'Deploy API to Production'
    pool:
      vmImage: 'ubuntu-latest'
    
    steps:
    - download: current
      artifact: backend-drop
      displayName: 'Download Backend Artifact'
      
    - task: AzureWebApp@1
      inputs:
        azureSubscription: $(azureSubscription)
        appType: 'webAppLinux'
        appName: $(webAppNameBackendProd)
        resourceGroupName: $(resourceGroupName)
        package: '$(Pipeline.Workspace)/backend-drop/backend.zip'
        runtimeStack: 'NODE|20-lts'
        startUpCommand: 'npm start'
      displayName: 'Deploy Backend to Production'
    
    - task: AzureAppServiceSettings@1
      inputs:
        azureSubscription: $(azureSubscription)
        appName: $(webAppNameBackendProd)
        resourceGroupName: $(resourceGroupName)
        appSettings: |
          [
            {
              "name": "NODE_ENV",
              "value": "production",
              "slotSetting": false
            },
            {
              "name": "PORT",
              "value": "8000",
              "slotSetting": false
            },
            {
              "name": "WEBSITE_NODE_DEFAULT_VERSION",
              "value": "20.11.0",
              "slotSetting": false
            }
          ]
      displayName: 'Configure Production Backend Settings'

  - job: DeployFrontendProd
    displayName: 'Deploy Frontend to Production'
    pool:
      vmImage: 'ubuntu-latest'
    dependsOn: DeployBackendProd
    
    steps:
    - download: current
      artifact: frontend-drop
      displayName: 'Download Frontend Artifact'
      
    - task: AzureWebApp@1
      inputs:
        azureSubscription: $(azureSubscription)
        appType: 'webAppLinux'
        appName: $(webAppNameFrontendProd)
        resourceGroupName: $(resourceGroupName)
        package: '$(Pipeline.Workspace)/frontend-drop/frontend.zip'
        runtimeStack: 'NODE|20-lts'
        startUpCommand: 'npx serve -s . -l 8080'
      displayName: 'Deploy Frontend to Production'
    
    - task: AzureAppServiceSettings@1
      inputs:
        azureSubscription: $(azureSubscription)
        appName: $(webAppNameFrontendProd)
        resourceGroupName: $(resourceGroupName)
        appSettings: |
          [
            {
              "name": "WEBSITE_NODE_DEFAULT_VERSION",
              "value": "20.11.0",
              "slotSetting": false
            },
            {
              "name": "PORT",
              "value": "8080",
              "slotSetting": false
            },
            {
              "name": "REACT_APP_API_URL",
              "value": "$(apiUrlProd)",
              "slotSetting": false
            }
          ]
      displayName: 'Configure Production Frontend Settings'