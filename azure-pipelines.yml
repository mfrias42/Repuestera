# Azure DevOps Release Pipeline para Repuestera
# Despliegue multi-ambiente: QA ‚Üí Producci√≥n
# TP05 - Ingenier√≠a de Software 3

trigger:
- main

variables:
  # Configuraci√≥n de Azure
  azureSubscription: 'Azure-Service-Connection'
  resourceGroupName: 'rg-repuestera'
  location: 'Brazil South'
  
  # Configuraci√≥n de Node.js
  nodeVersion: '20.x'
  
  # Variables QA
  webAppNameBackendQA: 'repuestera-mfrias-qa-api'
  webAppNameFrontendQA: 'repuestera-mfrias-qa-web'
  apiUrlQA: 'https://repuestera-mfrias-qa-api.azurewebsites.net/api'
  
  # Variables Producci√≥n (recursos existentes)
  webAppNameBackendProd: 'repuestera-api-mfrias'
  webAppNameFrontendProd: 'repuestera-web-mfrias'
  apiUrlProd: 'https://repuestera-api-mfrias.azurewebsites.net/api'

stages:
- stage: Build
  displayName: 'Construcci√≥n'
  jobs:
  - job: BuildBackend
    displayName: 'Construir Backend'
    pool:
      vmImage: 'ubuntu-latest'
    
    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: $(nodeVersion)
      displayName: 'Instalar Node.js $(nodeVersion)'

    - script: |
        cd backend
        npm install --production=false
      displayName: 'Instalar dependencias del backend'
    
    - script: |
        cd backend
        npm run test
      displayName: 'Ejecutar pruebas del backend'
      continueOnError: false

    - task: ArchiveFiles@2
      inputs:
        rootFolderOrFile: 'backend'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/backend.zip'
        replaceExistingArchive: true
      displayName: 'Comprimir archivos del backend'

    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)/backend.zip'
        ArtifactName: 'backend-drop'
        publishLocation: 'Container'
      displayName: 'Publicar artefacto del backend'

  - job: BuildFrontendQA
    displayName: 'Construir Frontend para QA'
    pool:
      vmImage: 'ubuntu-latest'
    
    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: $(nodeVersion)
      displayName: 'Instalar Node.js $(nodeVersion)'

    - script: |
        cd frontend
        npm install
        npm run build
      displayName: 'Instalar dependencias y construir para QA'
      env:
        REACT_APP_API_URL: $(apiUrlQA)
        NODE_ENV: 'production'

    - task: ArchiveFiles@2
      inputs:
        rootFolderOrFile: 'frontend/build'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/frontend-qa.zip'
        replaceExistingArchive: true
      displayName: 'Comprimir build del frontend QA'

    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)/frontend-qa.zip'
        ArtifactName: 'frontend-qa-drop'
        publishLocation: 'Container'
      displayName: 'Publicar artefacto del frontend QA'

  - job: BuildFrontendProd
    displayName: 'Construir Frontend para Producci√≥n'
    pool:
      vmImage: 'ubuntu-latest'
    
    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: $(nodeVersion)
      displayName: 'Instalar Node.js $(nodeVersion)'

    - script: |
        cd frontend
        npm install
        npm run build
      displayName: 'Instalar dependencias y construir para Producci√≥n'
      env:
        REACT_APP_API_URL: $(apiUrlProd)
        NODE_ENV: 'production'

    - task: ArchiveFiles@2
      inputs:
        rootFolderOrFile: 'frontend/build'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/frontend-prod.zip'
        replaceExistingArchive: true
      displayName: 'Comprimir build del frontend Producci√≥n'

    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)/frontend-prod.zip'
        ArtifactName: 'frontend-prod-drop'
        publishLocation: 'Container'
      displayName: 'Publicar artefacto del frontend Producci√≥n'

# ============================================================================
# STAGE QA - Despliegue Autom√°tico para Testing
# ============================================================================
- stage: DeployQA
  displayName: 'üß™ QA Environment'
  dependsOn: Build
  condition: succeeded()
  
  variables:
    NODE_ENV: 'qa'
    API_URL: $(apiUrlQA)
  
  jobs:
  - deployment: DeployBackendQA
    displayName: 'Deploy API to QA'
    pool:
      vmImage: 'ubuntu-latest'
    environment: 'qa-backend'
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: backend-drop
            displayName: 'Download Backend Artifact'
            
          - task: AzureWebApp@1
            inputs:
              azureSubscription: $(azureSubscription)
              appType: 'webAppLinux'
              appName: $(webAppNameBackendQA)
              resourceGroupName: $(resourceGroupName)
              package: '$(Pipeline.Workspace)/backend-drop/backend.zip'
              runtimeStack: 'NODE|20-lts'
              startUpCommand: 'npm start'
            displayName: 'Deploy Backend to QA'
          
          - task: AzureAppServiceSettings@1
            inputs:
              azureSubscription: $(azureSubscription)
              appName: $(webAppNameBackendQA)
              resourceGroupName: $(resourceGroupName)
              appSettings: |
                [
                  {
                    "name": "NODE_ENV",
                    "value": "qa",
                    "slotSetting": false
                  },
                  {
                    "name": "PORT",
                    "value": "8000",
                    "slotSetting": false
                  },
                  {
                    "name": "WEBSITE_NODE_DEFAULT_VERSION",
                    "value": "20.11.0",
                    "slotSetting": false
                  },
                  {
                    "name": "DB_HOST",
                    "value": "repuestera-mfrias-qa-server.mysql.database.azure.com",
                    "slotSetting": false
                  },
                  {
                    "name": "DB_PORT",
                    "value": "3306",
                    "slotSetting": false
                  },
                  {
                    "name": "DB_NAME",
                    "value": "repuestera_qa_db",
                    "slotSetting": false
                  },
                  {
                    "name": "DB_USER",
                    "value": "qa_admin",
                    "slotSetting": false
                  },
                  {
                    "name": "DB_PASSWORD",
                    "value": "QA_SecurePass2024!",
                    "slotSetting": false
                  },
                  {
                    "name": "JWT_SECRET",
                    "value": "qa_jwt_secret_key_2024",
                    "slotSetting": false
                  },
                  {
                    "name": "JWT_EXPIRES_IN",
                    "value": "24h",
                    "slotSetting": false
                  }
                ]
            displayName: 'Configure QA Backend Settings'
          
          - task: AzureWebApp@1
            inputs:
              azureSubscription: $(azureSubscription)
              appType: 'webAppLinux'
              appName: $(webAppNameBackendQA)
              resourceGroupName: $(resourceGroupName)
              package: '$(Pipeline.Workspace)/backend-drop/backend.zip'
              runtimeStack: 'NODE|20-lts'
              startUpCommand: 'cd /home/site/wwwroot && npm run init-db-qa && npm start'
            displayName: 'Initialize QA Database and Start Backend'

  - deployment: DeployFrontendQA
    displayName: 'Deploy Frontend to QA'
    pool:
      vmImage: 'ubuntu-latest'
    environment: 'qa-frontend'
    dependsOn: DeployBackendQA
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: frontend-qa-drop
            displayName: 'Download Frontend QA Artifact'
            
          - task: AzureWebApp@1
            inputs:
              azureSubscription: $(azureSubscription)
              appType: 'webAppLinux'
              appName: $(webAppNameFrontendQA)
              resourceGroupName: $(resourceGroupName)
              package: '$(Pipeline.Workspace)/frontend-qa-drop/frontend-qa.zip'
              runtimeStack: 'NODE|20-lts'
              startUpCommand: 'npx serve -s . -l 8080'
            displayName: 'Deploy Frontend to QA'
          
          - task: AzureAppServiceSettings@1
            inputs:
              azureSubscription: $(azureSubscription)
              appName: $(webAppNameFrontendQA)
              resourceGroupName: $(resourceGroupName)
              appSettings: |
                [
                  {
                    "name": "WEBSITE_NODE_DEFAULT_VERSION",
                    "value": "20.11.0",
                    "slotSetting": false
                  },
                  {
                    "name": "PORT",
                    "value": "8080",
                    "slotSetting": false
                  }
                ]
            displayName: 'Configure QA Frontend Settings'

# ============================================================================
# STAGE PRODUCTION - Despliegue con Aprobaci√≥n Manual
# ============================================================================
- stage: DeployProduction
  displayName: 'üöÄ Production Environment'
  dependsOn: DeployQA
  condition: succeeded()
  
  variables:
    NODE_ENV: 'production'
    API_URL: $(apiUrlProd)
  
  jobs:
  - deployment: DeployBackendProd
    displayName: 'üîê Deploy API to Production (Manual Approval Required)'
    pool:
      vmImage: 'ubuntu-latest'
    environment: 'production-backend'
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: backend-drop
            displayName: 'Download Backend Artifact'
            
          - task: AzureWebApp@1
            inputs:
              azureSubscription: $(azureSubscription)
              appType: 'webAppLinux'
              appName: $(webAppNameBackendProd)
              resourceGroupName: $(resourceGroupName)
              package: '$(Pipeline.Workspace)/backend-drop/backend.zip'
              runtimeStack: 'NODE|20-lts'
              startUpCommand: 'npm start'
            displayName: 'Deploy Backend to Production'
          
          - task: AzureAppServiceSettings@1
            inputs:
              azureSubscription: $(azureSubscription)
              appName: $(webAppNameBackendProd)
              resourceGroupName: $(resourceGroupName)
              appSettings: |
                [
                  {
                    "name": "NODE_ENV",
                    "value": "production",
                    "slotSetting": false
                  },
                  {
                    "name": "PORT",
                    "value": "8000",
                    "slotSetting": false
                  },
                  {
                    "name": "WEBSITE_NODE_DEFAULT_VERSION",
                    "value": "20.11.0",
                    "slotSetting": false
                  },
                  {
                    "name": "DB_HOST",
                    "value": "repuestera-server-mfrias.mysql.database.azure.com",
                    "slotSetting": false
                  },
                  {
                    "name": "DB_PORT",
                    "value": "3306",
                    "slotSetting": false
                  },
                  {
                    "name": "DB_NAME",
                    "value": "repuestera_prod_db",
                    "slotSetting": false
                  },
                  {
                    "name": "DB_USER",
                    "value": "prod_admin",
                    "slotSetting": false
                  },
                  {
                    "name": "DB_PASSWORD",
                    "value": "Prod_SecurePass2024!",
                    "slotSetting": false
                  },
                  {
                    "name": "JWT_SECRET",
                    "value": "prod_jwt_secret_key_secure_2024",
                    "slotSetting": false
                  },
                  {
                    "name": "JWT_EXPIRES_IN",
                    "value": "24h",
                    "slotSetting": false
                  }
                ]
            displayName: 'Configure Production Backend Settings'
          
          - task: AzureWebApp@1
            inputs:
              azureSubscription: $(azureSubscription)
              appType: 'webAppLinux'
              appName: $(webAppNameBackendProd)
              resourceGroupName: $(resourceGroupName)
              package: '$(Pipeline.Workspace)/backend-drop/backend.zip'
              runtimeStack: 'NODE|20-lts'
              startUpCommand: 'cd /home/site/wwwroot && npm run init-db-prod && npm start'
            displayName: 'Initialize Production Database and Start Backend'

  - deployment: DeployFrontendProd
    displayName: 'üîê Deploy Frontend to Production (Manual Approval Required)'
    pool:
      vmImage: 'ubuntu-latest'
    environment: 'production-frontend'
    dependsOn: DeployBackendProd
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: frontend-prod-drop
            displayName: 'Download Frontend Production Artifact'
            
          - task: AzureWebApp@1
            inputs:
              azureSubscription: $(azureSubscription)
              appType: 'webAppLinux'
              appName: $(webAppNameFrontendProd)
              resourceGroupName: $(resourceGroupName)
              package: '$(Pipeline.Workspace)/frontend-prod-drop/frontend-prod.zip'
              runtimeStack: 'NODE|20-lts'
              startUpCommand: 'npx serve -s . -l 8080'
            displayName: 'Deploy Frontend to Production'
          
          - task: AzureAppServiceSettings@1
            inputs:
              azureSubscription: $(azureSubscription)
              appName: $(webAppNameFrontendProd)
              resourceGroupName: $(resourceGroupName)
              appSettings: |
                [
                  {
                    "name": "WEBSITE_NODE_DEFAULT_VERSION",
                    "value": "20.11.0",
                    "slotSetting": false
                  },
                  {
                    "name": "PORT",
                    "value": "8080",
                    "slotSetting": false
                  }
                ]
            displayName: 'Configure Production Frontend Settings'